Database
========

SELECT file.mtime
FROM file
WHERE file.path = ?

---
resource:
  blob_id: rowid
  type: { archive, image, directory, collection } ('collection's are for PDF and other files containing multiple child resources)
  handler: { pdf, jpeg, png, rar, 7zip, zip, ... }
  arguments: string
  // parent_id: rowid (parent resource_id in case of 'collections', like PDFs)
  status: { error, access_error, success, incremental }

collection: // either resource.parent_id or separate collection table
  resource_id: row_id
  parent_id: row_id

blob:
  sha1: blob
  size: integer

file:
  path: string
  blob_id: rowid
  mtime: integer

url:
  host: string (e.g. http://www.google.com)
  path: string (e.g. /index.html)
  mtime: string (e.g. "Wed, 14 Nov 2012 21:35:42 GMT")
  content_type: string (e.g. "text/html")
  // header: string (i.e. full dump of header from last access)
  blob_id: rowid

archive:
  resource_id: rowid
  password: NULL | string
  password_protected: bool

archive_file:
  archive_id: rowid
  path: string
  blob_id: rowid

group:
  name: string
  resource_id: rowid

resource_group:
  group_id: rowid
  resource_id: rowid

video:
  resource_id: rowid
  duration: real [seconds]
  width:  integer
  height: integer
  aspect_ratio: real

image:
  resource_id: rowid
  width:  integer
  weight: integer

image_transform:
  image_id: rowid
  transform: { rot0, rot90, rot180, rot270, rot0flip, rot90flip, rot180flip, rot270flip }

tile:
  image_id: rowid
  x: integer
  y: integer
  scale: integer
  format: { rgb, rgba }
  data: blob

pdf:
  password_user: string | NULL
  password_owner: string | NULL

tag:
  name: string

resource_tag
  resource_id: rowid
  tag_id: rowid

...

Resource:
=========

  resource = scheme ":" path { "//" handler { ":" args } }


Resource Examples:
==================

Simple ResourceName:
  sha1:118011f6ac3f8f017542bd90506725a9d78c88c3//image-jpeg
  sha1:d0b2bf5e1feaaa8d7247dfd6fe5d7a86dcec9c4d//image-png
  sha1:fab9582fca66b22c88cc7816acce0d727aed0707//video-wmv
  sha1:39c44100942ee19cd8b7440bc231aa6a34c0e735//archive-rar

Complex ResourceName:
  sha1:fab9582fca66b22c88cc7816acce0d727aed0707//image-wmv:34.0  # image of the video at second 34
  sha1:fab9582fca66b22c88cc7816acce0d727aed0707//image-pdf:23    # page 23 of a PDF as image
  sha1:fab9582fca66b22c88cc7816acce0d727aed0707//image-pdf:10

ResourceName Handler Stack:
  sha1:d0b2bf5e1feaaa8d7247dfd6fe5d7a86dcec9c4d//image-png//image-contrast:50
    -> not yet supported, maybe later

Incorrect ResourceName:
  sha1:16273c96b3343af5972202654c1aff90566b12e8//archive-rar:subdir/subdir/example.txt
    -> files in archives are accessed by their checksum, not by their
       path in the archive, see archive_file table

ResourceLocator:
  -> not saved in the database for now, maybe later to allow
     determine resource-type by location instead of by content
  -> either give a blob or child ResourceLocators when it's an archive

Untyped ResourceLocator:
  file:///home/juser/image/photo/test.jpg
     -> lookup blob_id, use blob_id to lookup resource_id which has type

Typed ResourceLocator:
  file:///home/juser/image/photo/test.jpg//image-jpeg
     -> not supported, maybe later to override automatic type detection

Untyped Archive ResourceLocator:
  file:///home/juser/image/photo.rar//archive-rar:photos/img001.jpg
     -> give a blob

Resource Handler Stacks:
  file:///archive.rar//archive-rar:archive2.zip//archive-zip:test.jpg
    -> decomposed into:
      file:///archive.rar
      sha1:118011f6ac3f8f017542bd90506725a9d78c88c3//archive-rar:archive2.zip
      sha1:39c44100942ee19cd8b7440bc231aa6a34c0e735//archive-zip:test.jpg
      sha1:d0b2bf5e1feaaa8d7247dfd6fe5d7a86dcec9c4d//image-jpg

  file:///test.jpg//image-jpeg//image-contrast:50%//image-gamma:0.8
   -> not yet supported, maybe later
   -> for now only the last handler is allowed to be a type other then blob

Valid URL characters:
  ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~:/?#[]@!$&'()*+,;=.
  Any other character needs to be encoded with the percent-encoding (%hh).

Valid filename characters:
  Everything except '/' and '\0'

Handlersplit characters:
  ^  works with URL, does not work with filenames
  // works with normalized filenames, works with most URLs, but conflicts with the spec

Check libarchive for some more supported archive file formats

# EOF #
