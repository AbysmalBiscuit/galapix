[[ Galapix ToDo ]]
_______________________________________________________________________________

Release procedure:
==================

* test that Galapix works with and without SpaceNavigator libraries

* test that all Galapix functions are accessible without SpaceNavigator

* test that mouse wheel is supported

* test svn trunk a lot

* test database compatibilty

* check that all keyboard shortcuts are documented

* svn cp trunk@REV tags/galapix-0.0.X

* ZoomTool doesn't know about trackball_mode and thus zooms wrong

* need to filter out directories when generating file list for .rar

* need a way to handle 'maybe' situations, i.e. impossible to tell
  quickly if a URL exist or not, Size is impossible to tell in a quick
  way often as well

* add something to reconstruct a file from the database (as backup in
  case of file loss)

* figure out a way to handle multi-image files (rar, tar, zip, pdf, multilayer-xcf)

  rar vb RARFILE -> [files, ...]
  rar p -inul RARFILE FILE_IN_ARCHIVE -> file_content

  unzip -lqq ZIP 
  unzip -pqq ZIP FILE_IN_ARCHIVE

  tar --list TAR
  tar --extract --to-stdout --file TAR FILE
 
  XCF: parse xcfinfo output

  Images are accessed when their width/height is requested and when
  the tiles are generated, everything else is happening outside with
  the database not the files

* check for xcf2pnm, xcfinfo and other tool binaries on startup

* make sure that PNM class can handle all PNM formats that XCF can output

* leaving fullscreen doesn't work properly, glViewport size ends up
  being different from the window size

* when relayout track the currently selected item with the camera, so
  that you can switch between random layout and sorted layout without
  losing track of a picture

* some formats (xcf.bz2, stuff in archives) are very slow when it
  comes to getting width/height, would be faster to not get it and
  only get it when generating tiles

* switch to plain Magick libraries, not the C++ version

* reading all files from the database should be incremental

* add raise/lower buttons 

* catch PNG read errors properly 

* add a way to delete all cached stuff related to an image

* add support for checkboard pattern and stuff in the background

* added toggle for GL_LINEAR/GL_NEAREST

* Merge TileGenerator and TileGeneratorThread code

* How to detect file format: file extension (case-insensitive, magic byte)

* add shift-click support to the MoveTool, also rename MoveTool to SelectTool

* make 'd' clone the current selection

* change Framebuffer/Surface so that we can draw images with alpha

* when highly zoomed in, moving doesn't work any more

* implemented 2x2 Matrix

* implement image rotation

* add button to flip the view

* When thumbgen is running while galapix view is started:

terminate called after throwing an instance of 'SQLiteError'
  what():  SQLiteStatement::~SQLiteStatement: column filename is not unique
Aborted

* support for archive files (rar, zip) would be nice

* support for additional image formats would be nice, via ImageMagicks
  "convert" as a fallback

Galapix Video Demo:
-------------------

http://video.google.com/videoplay?docid=7578014083503114514&hl=en

* create a demo video and publish on Google Video
  - demonstrate the direct zoom into thumbnails
  - demonstrate the view rotation
  - demonstrate relayouting of images
  - demonstrate random layout
  - demonstrate the movement of images
  - demonstrate the resize of images
  - demonstrate isolation and deletion of images

* make sure that it isn't as blurry as the last one and doesn't have
  the framerate glitch

* use a wider range of pictures


Galapix 0.0.4 Release ToDo:
---------------------------

* check PNG support: indexed, RGB, RGBA, Grayscale

* fix the max_scale mess some more

* small scales are displayed at the wrong size (thumbnail.size * scale
  != image_size due to small values of thumbnail.size)

* implement workspace load&save

* add function to relayout just the selection instead of all images

* fix random layout so that all image sizes are handled equally,
  currently low-res images get really small

* handle file failures more gracefully, currently we run into a 'job
  rejected' situation because the job can never be completed
* Loading JPEG file can throw exception and that isn't handled
  - failure modes: file not found, data corrupt

* need to properly check for collisions in the database and update
  entries instead of just inserting a duplicate (not an issue for
  normal use, but for 'prepare' and 'thumbgen'), fixing this might
  also fix incorrect generation ranges

* handle "Premature end of JPEG file" a little better, mark FileEntry
  as broken or so
 
Galapix 0.1.0 Release ToDo:
---------------------------

* make middle button exit trackball mode

* add check for boost header files and make scons somewhat more solid
* replace SCons with WAF?

* check with sqlite3_table_column_metadata() that the table has the
  right format

* pointing galapix to an empty directory is weird (directory is empty,
  galapix displays files in database, but can't create new thumbnails due
  to missing files). It should give an error that no images could be found
  should do something special if in-filenames are smaller then out-filenames 

* need to display the thread status graphically somehow (graphical
  rotating wheel? per image or overall?)

* when the current tiles aren't available only higher scales (smallerones) are
  searched, not lower ones (bigger)

* seperate galapix from the thumbgen code, so that there is a
  galapix-tool and a galapix program

* galapix --help
   -d, --database FILE

* galapix-thumbgen
   -m, --minsize X      Generate tiles till this size
   -d, --database FILE  

* galapix-db [info|list|merge|cleanup|delete]
   -d, --database FILE

  galapix-db merge database1.sqlite database2.sqlite out-database.sqlite
  galapix-db cleanup
  galapix-db delete -d database1.sqlite [PATTERN]...

_______________________________________________________________________________

* maybe limit the scrolling area, so that one can't scroll completly
  out of the picture: calculate the center of all images and let an
  arrow point into the right direction when no images are visible on
  the screen

* improve overlap constrain solver, make it fast and make it animated

* images are always requested in the highest quality, instead lower
  quality should be requested first and heigher quality only if the
  image is visible for longer periodes of time on the screen

* SDL returns different mouse button numbers depending in if a grab is
  active or not, so buttons will get swapped in left-hand situations

* add more command line options:

  --aspect
  --select (?)

* save color or a 8x8 thumbnail in the FileEntry, for faster loading,
  also save 1x1 Color in FileEntry

* store the max_tile size into the FileTable (should we? We can calc
  it dynamically)

* opening a large directory causes file entries to be generated, but
  no tiles to be shown, because tiles are last in the queue, different
  jobs should have different queue

* Displaying 75'000 images gets really slow, OpenGL bottleneck,
  texture packing might help, sending vertex array instead of
  glBegin/glEnd of course too

* implement smooth scale in SoftwareSurface (like LINEAR instead of NEAREST),

* implement non-copying crop in SoftwareSurface (use parent image data
  as pixel source)

* multi-threading in the tile generator for multicore

* faster incremental tile generation

* File stuff should really be seperate from Tile getting -> Seperate
  worker thread?

* Jobs are only canceled when the image is no longer visible, but not
  when the images zoom level has changed.


Database Stuff:
===============

* There is no handling of tile collisions in the database, so one
  might end up with duplicate entries for the same tile. Tile
  generation is also not optimal, since some data gets discarded.

* Support for multiple databases at once would be good, since a
  database can be used/abused as image file


Thread Stuff:
=============

* Jobs are currently not prioritized properly so unimportant ones
  might be executed before important ones, not harmfull, but its
  unpleasing to see images on the edge of the screen being generated
  before images in the center of the screen.

* request lower res tiles, before requesting highres tiles

* move JPEG decoding in a seperate thread so that the database thread
  can run free with database stuff


Possible Future Improvements:
=============================

* turn Galapix into a proper Gnome/Gtk or WxWidget Application with
  proper GUI, instead of a raw SDL/OpenGL application

* float isn't enough, on high zoom level it breaks apart, might need double

* implement shader to change hue, saturation, contrast, brightness, etc.

* Toolpalette: Select picture, scale picture, move pictures, align
  selected picture into a group, maybe have a box into which one can
  drop pictures.

* galapix can only handle JPEG files, no other format is supported. 

* When zooming into an images beyond its original size one will see
  noticable seams at the areas where the tiles meet. This is an
  artifact caused by OpenGLs linear filtering that can't work across
  tile borders, but only on a single tile. A possible fix for this
  would be to add a 1px width border to the tiles, but that would slow
  down the tile generation process from JPEG data, so it is unclear if
  it ever will be implemented.

* galapix completly ignores ~/.thumbnails/, it should maybe make use of
  that to speed up initial thumbnail generation

* Some obscure JPEG formats are not supported:
  Generating tiles for /resources/flickr/flickr/farm3.static.flickr.com/2123/1782745732_d7f5c8cc8c_o.jpg
  Exception: JPEG: Unsupported color depth: 4

* allow rotation of images

* record how long an image has been viewed and allow to display which
  images have been viewed most

* basic exif support to get the orientation right (libexif)

* no support for RGBA and greyscale in SoftwareSurface


Random Notes:
=============

* jpegtran can't do crop of large scale JPEGs in small amount of
  space, so cropping with libjpeg likely won't work or get more
  complicated

* a single 2048x2048 texture can hold 65536 8x8 tiles -> ~12MB

* when 8x8 or smaller JPEG is larger then RAW, else JPEG always wins

8x8   -> 250
16x16 -> 430
32x32 -> 700
64x64 -> 1600

1920x1080: (64x64) 30x17=510, (32x32) 60x34=2040, (16x16) 120x68=8160, (4x4) 480x270=129600
~100MB for fullscreen 16x16 Thumbs
~32 textures for 129600 thumbs

16x16 -> 1KB
1000 thumbnails -> 1MB
10'000 thumbnails -> 10MB
100'000 thumbnails -> 100MB (graphic card gets full) -> Solution: smaller thumbnails, also unload from GFX card, but keep software backstore

_______________________________________________________________________________


# EOF #
